#summary OpenXsensor Configuration
#labels doc
#sidebar OXS_Sidebar

=Understanding and Configuring !OpenXsensor=

OXS is using an [http://arduino.cc/ Arduino] board, so download the [http://arduino.cc/en/Main/Software#toc2 Arduino IDE] to use it.

Then, you have to [OXS_Downloads download the latest versions] of !OpenXsensor and OXS Configurator.

Decompress the archives, then place "openxsensor_vx_y" in your arduino project directory. You can put "oxs_configurator_vx.y" where you want.

OpenXsensor can do a lot of different measurements (that you can combine as you want) therefore it needs a rather dense configuration file.

That's why the OpensXsensor Configurator has been created, it helps set all the OXS functionalities more easily. The documentation below will only make use of the OXS Configurator.

==OXS Configurator Title==

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_01.jpg

On the top right logo corner you've got an "About" button, on the bottom left, you'll see the compatible !OpenXsensor version and in the bottom right, the Configurator version.

All along the program, you can hover the mouse on the controls and a tooltip should appear with a breve description and/or the default value.

==General settings==

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_02.jpg

Here you can set the openxsensor directory so that the config file could be written in the right place.
Unfortunately, the text field doesn't support copy pasting but you can manually type the path or click the button "..." at the right and navigate to the folder.

----

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_03.jpg

The !FrSky protocol refers to what type of receiver you want OXS to communicate with: 
 * Hub protocol for D series receivers
 * Smart Port for X series receivers
 
The serial output pin number is the arduino digital pin to connect to the receiver telemetry data input:
 * Pin labelled "Rx" on the D series receivers https://openxsensor.googlecode.com/svn/wiki/images/D8R_Side.png
 
 * Pin labelled "S" from the Smart Port connector on the X series receivers https://openxsensor.googlecode.com/svn/wiki/images/X8R_topSP.png

----

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_04.jpg

*! Never connect a voltage > VCC to an Ax arduino analog pin !*

Voltages can be measured compared to VCC or an 1.1 V internal reference:

 * If VCC is very stable, it is probably more accurate and easier to measure voltages based on VCC. Still, this requires that the voltage applied on arduino "RAW" pin is regulated, or at least always more than 5.5 V for a 5 V Arduino or 3.7 V for a 3.3 V Arduino (headroom needed for the arduino board regulator).
 * If voltage on "Raw" pin is less than 5.5 V or 3.7 V depending on the arduino used, and unstable (e.g. due to servo consumption or low battery), then voltage measurements will be wrong.    
 * If VCC can't be very stable (e.g. arduino is powered by a battery), then it is possible to measure based on the arduino 1.1 V internal reference.

To measure a voltage greater than VCC or 1.1 V depending on the option you choose, you need to use a [https://learn.sparkfun.com/tutorials/voltage-dividers voltage divider].

This will be discussed in details when we talk about voltage sensors.

----

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_05.jpg

With this option enabled and the corresponding pin number set, you can use a button (connected to the digital arduino pin previously chosen) to reset some OXS measurements.

Button pressed between 0.1 and 3 seconds: 
 * reset the minimum and maximum current data
 * reset all vario data
 
Button pressed between 3 and 5 seconds: 
 * reset the consumed current (milliAmps)
 
----

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_06.jpg

If checked, some telemetry values will be stored in EEProm (arduino memory) every 10 seconds. 
 * current data (min, max values and consumption)
 * vario data 
 
These values will be restored every power up. (e.g. mAh counted...), so you will keep data continuity even if the model is turned off between flights.

----

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_07.jpg

Tick the sensors connected so that OXS can use them.

----

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_08.jpg

You can load and save preset settings for your different !OpenXsensor configurations.

The "Preset" folder in the Configurator root is open by default but you can put them where you want.

==Vario settings==

A *[https://code.google.com/p/openxvario/wiki/BuildInstructions MS5611 barometric sensor]* can be connected to OXS and provide altitude and vertical speed data.

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_vario_01.jpg

Sensitivity can be set between:
  * 20 (conservative setting, reaction time = several seconds)
  * 150 (fast but lot of errors, reaction time = much less than a second)
  
50 is a standard setting when measuring small vertical speed (search for lift with a glider).

- Sensitivity Min. = sensitivity value being used when vertical speed is lower than Vertical speed sensibility Min. (Standard value = 40)

- Sensitivity Max. = sensitivity value being used when vertical speed is higher than Vertical speed sensibility Max. (Standard value = 100)

Sensitivity Max. can be set equal to Min. when higher sensitivity for high vertical speed is unwanted.

- Vertical speed sensibility Min. (cm/s) --> Sensitivity Min. applies when vertical speed is lower than this value. (Standard value = 20)

- Vertical speed sensibility Max. (cm/s) --> Sensitivity Max. applies when vertical speed is higher than this value. (Standard value = 100)

Sensitivity is automatically interpolated between Vertical speed sensibility Min. ans Vertical speed sensibility Max.

----

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_vario_02.jpg

If the checkbox RC remote sensitivity is ticked, sensitivity can also be adjusted from the Tx using a switch and/or a potentiometer and a servo channel.

In this case, a receiver signal servo pin has to be connected to the arduino pin chosen in the PPM Pin drop down list.

- PPM range Min. = the minimum value of the ppm input (pulse length in microseconds ). (Standard OpenTX value is 988)

- PPM range Max. = the maximum value of the ppm input (pulse length in microseconds ). (Standard OpenTX value is 2012)

The PPM sensitivity parameters define the range in which you will be able to adjust the sensitivity value.

- PPM sensitivity Min. = the sensitivity minimum value. (Standard value could be 20)

- PPM sensitivity Max. = the sensitivity maximum value. (Standard value could be 100)

_Note : When Arduino detects a signal from TX, the parameters for the predefined sensitivity are automatically discarded._

----

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_vario_03.jpg

OXS can also apply some hysteresis on vertical speed changes.

This parameter allows to avoid that transmitted vertical speed changes too often (which can result in bad sound alerts).

It means that transmitted vertical speed will change only if measured vertical speed (after filtering) differs from previous transmitted value by more than the Hysteresis value. (Standard value can be 5 (5 cm/s), 0 means no hysteresis)

----

https://openxsensor.googlecode.com/svn/wiki/images/OXSC_vario_04.jpg

OXS can also deliver the vertical speed as an analog signal that has to be connected to A1 or A2 on D series receivers.

This can be useful if you have a receiver that has no digital communication pin (D6FR) or if it is already used by another sensor.

*! Additional Hardware is required !*     --     Please read [https://code.google.com/p/openxvario/wiki/RemoteControlYouVario Remote control your Vario].

To activate this feature, tick the Analog climb rate checkbox and choose the Climb rate Pin in the drop down list.

Then set the Min. and Max. Climb rate values (m/s) that you want to output to the receiver.

- Climb rate Min. value or lower will apply 0 V to the receiver analog pin (A1 or A2).

- Climb rate Max.  value or higher will apply 3.2 V to the receiver analog pin (A1 or A2).
